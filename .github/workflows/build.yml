name: Envoy/build-tools

permissions:
  contents: read

on:
  push:
    branches:
    - main
  pull_request:


jobs:
  build_image:
    if: >-
      ${{
          github.repository == 'envoyproxy/envoy-build-tools'
          || vars.ENVOY_CI_RUN == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        target: [ubuntu, debian]
        arch: [amd64, arm64]
    name: Build (${{ matrix.target }}-${{ matrix.arch }})
    uses: ./.github/workflows/_build_image.yml
    with:
      distro: ${{ matrix.target }}
      os_family: ${{ matrix.os_family != '' && matrix.os_family || 'linux' }}
      host-platform: ${{ matrix.arch }}
      runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
      target-platforms: ${{ matrix.arch == 'amd64' && 'linux/amd64' || 'linux/arm64' }}

  push-manifests:
    name: Create manifests (${{ github.event_name == 'pull_request' && 'dry run' || 'push' }})
    runs-on: ubuntu-latest
    needs: [build_image]
    permissions:
      contents: read
      packages: write
    steps:
    - name: 'Checkout repository'
      uses: actions/checkout@v4
    - name: Get docker SHA
      id: docker-sha
      shell: bash
      run: |
        TAG_SHA=$(git log -1 --pretty=format:"%H" ./docker)
        echo "sha=${TAG_SHA}" >> $GITHUB_OUTPUT

    - name: Generate manifest configuration
      id: config
      uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.23
      with:
        input: |
          tag_sha: ${{ steps.docker-sha.outputs.sha }}
          gcr_image_name: ${{ vars.GCR_IMAGE_NAME || 'envoy-build' }}
          debian_variants: ["ci", "worker", "devtools", "docker", "llvm", "mobile", "test"]
          ubuntu_variants: ["ci", "mobile", "test", "full"]
        input-format: yaml
        filter: |
          .tag_sha as $tag_sha
          | .gcr_image_name as $gcr_image_name
          | {
              manifests: (
                # Debian manifests
                [.debian_variants[] | {
                  name: "envoy-build",
                  tag: "\(.)-\($tag_sha)",
                  registry: "docker.io/envoyproxy",
                  architectures: ["amd64", "arm64"],
                  "artifact-pattern": "oci-debian-{arch}/debian-\(.)-\($tag_sha)-{arch}.tar",
                  "additional-tags": (if . == "ci" then [$tag_sha] else null end)
                }] +
                # Ubuntu manifests
                [.ubuntu_variants[] | {
                  name: "envoy-build-ubuntu",
                  tag: "\(.)-\($tag_sha)",
                  registry: "docker.io/envoyproxy",
                  architectures: ["amd64", "arm64"],
                  "artifact-pattern": "oci-ubuntu-{arch}/ubuntu-\(.)-\($tag_sha)-{arch}.tar",
                  "additional-tags": (if . == "full" then [$tag_sha] else null end)
                }] +
                # GCR manifest (Ubuntu full only)
                [{
                  name: $gcr_image_name,
                  tag: $tag_sha,
                  registry: "gcr.io/envoy-ci",
                  architectures: ["amd64", "arm64"],
                  "artifact-pattern": "oci-ubuntu-{arch}/ubuntu-full-\($tag_sha)-{arch}.tar"
                }]
              ) | map(if ."additional-tags" == null then del(."additional-tags") else . end)
            }
        options: -c

    - name: Display configuration
      uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.23
      with:
        input: ${{ steps.config.outputs.value }}
        filter: .
        print-output: true

    - name: Collect and push OCI artifacts
      uses: ./.github/actions/oci-collector
      with:
        manifest-config: ${{ steps.config.outputs.value }}
        dry-run: ${{ github.event_name == 'pull_request' }}
        dockerhub-username: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKERHUB_USERNAME || '' }}
        dockerhub-password: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DOCKERHUB_PASSWORD || '' }}
        gcr-service-account-key: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.GCP_SERVICE_ACCOUNT_KEY || '' }}
