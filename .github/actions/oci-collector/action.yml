name: 'OCI Artifact Collector'
description: 'Collect OCI artifacts and push multi-arch manifests to registries using regctl'
author: 'Envoy Build Tools'

inputs:
  artifacts-pattern:
    description: 'Pattern to match artifact names (e.g., "oci-*")'
    required: false
    default: 'oci-*'
  artifacts-path:
    description: 'Path to download artifacts to'
    required: false
    default: './oci-images'
  manifest-config:
    description: |
      JSON configuration for manifests to create. Format:
      {
        "manifests": [
          {
            "name": "my-image",
            "tag": "latest",
            "registry": "docker.io/myorg",
            "architectures": ["amd64", "arm64"],
            "artifact-pattern": "{arch}/myimage-{arch}.tar",
            "push": true
          }
        ]
      }
    required: true
  dry-run:
    description: 'Run without actually pushing images'
    required: false
    default: false
  dockerhub-username:
    description: 'Docker Hub username'
    required: false
    default: ''
  dockerhub-password:
    description: 'Docker Hub token/password'
    required: false
    default: ''
  gcr-key:
    description: 'GCR service account JSON'
    required: false
    default: ''

outputs:
  pushed-manifests:
    description: 'JSON array of pushed manifest tags'
    value: ${{ steps.final-pushed.outputs.value }}
  manifest-details:
    description: 'JSON object with detailed manifest information'
    value: ${{ steps.final-details.outputs.value }}


runs:
  using: 'composite'
  steps:
  - name: Download OCI artifacts
    uses: actions/download-artifact@v4
    with:
      pattern: ${{ inputs.artifacts-pattern }}
      path: ${{ inputs.artifacts-path }}

  - name: Extract OCI archives
    shell: bash
    run: |
      echo "::group::Finding tar files"
      find ${{ inputs.artifacts-path }} -name "*.tar" -type f | sort
      echo "::endgroup::"
      echo "::group::Extracting OCI archives"
      mkdir -p /tmp/oci
      for tar_file in $(find ${{ inputs.artifacts-path }} -name "*.tar" -type f); do
          echo "Processing: ${tar_file}"
          dir_name=$(basename "${tar_file}" .tar)
          extract_dir="/tmp/oci/${dir_name}"
          echo "  Basename: ${dir_name}"
          echo "  Extract to: ${extract_dir}"
          mkdir -p "${extract_dir}"
          tar -xf "${tar_file}" -C "${extract_dir}"
          echo "  âœ“ Extracted successfully"
      done
      echo "::endgroup::"

      echo "::group::Extracted OCI directories"
      ls -la /tmp/oci/
      echo "::endgroup::"

  - name: Build buildah operations
    uses: envoyproxy/toolshed/gh-actions/jq@actions-v0.3.23
    id: operations
    with:
      input: |
        config: ${{ inputs.manifest-config }}
      input-format: yaml
      filter: |
        [
          .config.manifests[]
          | . as $manifest
          | .registry as $registry
          | .name as $name
          | .tag as $tag
          | "\(.registry)/\(.name):\(.tag)" as $manifest_tag
          | (.push // true) as $push
          | ."artifact-pattern" as $pattern
          | (.["additional-tags"] // []) as $additional_tags
          | ("manifest-\($manifest_tag | gsub("[:/]"; "_"))") as $manifest_name
          | ([.architectures[] as $arch
              | ($pattern | gsub("{arch}"; $arch) | gsub("{name}"; $name) | gsub("{tag}"; $tag)) as $tar_file
              | ($tar_file | gsub(".*/"; "") | gsub("\\.tar$"; "")) as $basename
              | "/tmp/oci/\($basename)"
            ]) as $sources
          | (if $push then
              {
                command: "manifest",
                args: ["create", $manifest_name],
                metadata: { tag: $manifest_tag }
              },
              ($sources[]
               | {
                  command: "manifest",
                  args: ["add", $manifest_name, "oci:\(.)"],
                  metadata: { tag: $manifest_tag }
                }),
              {
                command: "manifest",
                args: ["push", "--all", $manifest_name, "docker://\($manifest_tag)"],
                metadata: { tag: $manifest_tag }
              }
            else empty end)
        ]

  - name: Execute buildah operations
    uses: envoyproxy/toolshed/gh-actions/buildah@0a35e73988ced481f7b786b9a404f4d4cbf3a2ea
    id: buildah
    with:
      operations: ${{ steps.operations.outputs.value }}
      dry-run: ${{ inputs.dry-run }}
      dockerhub-username: ${{ inputs.dry-run != true && inputs.dockerhub-username || '' }}
      dockerhub-password: ${{ inputs.dry-run != true && inputs.dockerhub-password || '' }}
      gcr-key: ${{ inputs.dry-run != true && inputs.gcr-key || '' }}
